#!/usr/bin/env python3
import sys
import re
from itertools import chain


# ICC: An Intcode Assembler


ops = {
    "add": (1, "IIO"),
    "mult": (2, "IIO"),
    "in": (3, "O"),
    "out": (4, "I"),
    "jmpnz": (5, "II"),
    "jmpz": (6, "II"),
    "inf": (7, "IIO"),
    "eq": (8, "IIO"),
    "rel": (9, "I"),
    "stop": (99, ""),
}


def iccompile(source_str):
    elems = source_str.split("\n")
    elems = (s.split("#")[0] for s in elems)
    elems = chain.from_iterable(s.split(" ") for s in elems)
    elems = [s for s in elems if s]
    n = len(elems)

    labels = {}

    elems_nolabels = []

    # Find labels
    for elem in elems:
        if ":" in elem:
            parts = elem.split(":")
            if len(parts) != 2:
                raise Exception("Invalid element: " + elems[i])
            label = parts[0]
            if not re.match('\w+', label):
                raise Exception("Invalid label: " + label)
            if label in labels:
                raise Exception("Label defined twice: " + label)
            labels[label] = len(elems_nolabels)
            elem = parts[1]
        if elem == ">":
            continue
        elems_nolabels.append(elem)

    elems = elems_nolabels

    print_labels(labels)

    def parse_value(v):
        if re.match('-?\d+', v):
            return int(v)
        if re.match('@\w+', v):
            lbl = v[1:]
            if lbl not in labels:
                raise Exception("Undefined label: " + lbl)
            return labels[lbl]
        raise Exception("Invalid value: " + v)

    def parse_address(v):
        if re.match('\d+', v):
            return int(v)
        if re.match('\w+', v):
            if v not in labels:
                raise Exception("Undefined label: " + v)
            return labels[v]
        raise Exception("Invalid address: " + v)

    result = []

    i = 0
    while i < len(elems):
        op = elems[i]

        if op not in ops:
            result.append(parse_value(op))
            i += 1
            continue

        opcode, params = ops[op]

        if n <= i + len(params):
            raise Exception("Unexpected end of file after op " + op)

        modes = []
        values = []
        for p in range(len(params)):
            elem = elems[i+p+1]
            if elem.startswith("&"):
                modes.append(0)
                values.append(parse_address(elem[1:]))
            else:
                if params[p] == "O":
                    raise Exception("Need an address as output for op {} param {}, got {}".format(op, p + 1, elem))
                modes.append(1)
                values.append(parse_value(elem))

        for idx, mode in enumerate(modes):
            if mode > 0:
                opcode += 10**(idx+2)

        result.append(opcode)
        result.extend(values)
        i += 1 + len(params)

    assert len(result) == len(elems)

    return ",".join(str(v) for v in result)


def print_labels(labels):
    llist = [(v, l) for l, v in labels.items()]
    llist.sort()
    for value, label in llist:
        sys.stderr.write("{}: {}\n".format(label, value))


# Test
test_source = """
out 42
in &input # test comment
eq 2 input:0 &inputIsTwo
jmpnz inputIsTwo:0 @loop
stop
loop:>
add -1 &counter &counter
jmpnz counter:1000000 @loop
stop
"""
test_expected = "104,42,3,6,1108,2,0,9,1105,0,12,99,101,-1,17,17,1105,1000000,12,99"
assert iccompile(test_source) == test_expected


if __name__ == '__main__':
    if len(sys.argv) != 2:
        sys.stderr.write("Usage: icc <source_file>\n")
        exit(1)

    with open(sys.argv[1], 'r') as f:
        source = f.read()

    print(iccompile(source))
